(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>c});var o=n(15),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([e.id,"#header-div {\n    background-color: black;\n    color: red;\n}\n\n#content {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-evenly;\n    border: solid;\n}\n\n.rows {\n    display: flex;\n    flex-direction: row;\n}\n\n.squares {\n    outline: solid;\n    outline-width: 1px;\n    width: 20px;\n    height: 20px;\n    margin: 2px;\n    background-color: gainsboro;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,uBAAuB;IACvB,UAAU;AACd;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,mBAAmB;IACnB,6BAA6B;IAC7B,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,cAAc;IACd,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,WAAW;IACX,2BAA2B;AAC/B",sourcesContent:["#header-div {\n    background-color: black;\n    color: red;\n}\n\n#content {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-evenly;\n    border: solid;\n}\n\n.rows {\n    display: flex;\n    flex-direction: row;\n}\n\n.squares {\n    outline: solid;\n    outline-width: 1px;\n    width: 20px;\n    height: 20px;\n    margin: 2px;\n    background-color: gainsboro;\n}"],sourceRoot:""}]);const c=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);o&&r[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e.exports=function(e){var n,o,r=(o=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var o,r,i=[],a=!0,c=!1;try{for(n=n.call(e);!(a=(o=n.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(e){c=!0,r=e}finally{try{a||null==n.return||n.return()}finally{if(c)throw r}}return i}}(n,o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],a=r[3];if(!a)return i;if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),l="/*# ".concat(s," */"),d=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(d).concat([l]).join("\n")}return[i].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},a=[],c=0;c<e.length;c++){var s=e[c],l=o.base?s[0]+o.base:s[0],d=i[l]||0,u="".concat(l," ").concat(d);i[l]=d+1;var p=n(u),f={css:s[1],media:s[2],sourceMap:s[3]};-1!==p?(t[p].references++,t[p].updater(f)):t.push({identifier:u,updater:r(f,o),references:1}),a.push(u)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=n(i[a]);t[c].references--}for(var s=o(e,r),l=0;l<i.length;l++){var d=n(i[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=s}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o=n.css,r=n.media,i=n.sourceMap;r?e.setAttribute("media",r):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),i=n(569),a=n.n(i),c=n(565),s=n.n(c),l=n(216),d=n.n(l),u=n(589),p=n.n(u),f=n(426),h={};h.styleTagTransform=p(),h.setAttributes=s(),h.insert=a().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=d(),t()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals;const m=(e,t,n,o)=>{function r(){return Math.floor(8*Math.random()+0)}return{title:e,myBoard:t,human:o,opponentBoard:n,cpuRandomAttack:function(){let e=r(),t=r();for(;n.squares[e][t].hit;)e=r(),t=r();return n.receiveAttack(e,t)}}},A=(e,t)=>{let n=[];for(let e=0;e<t;e++)n[e]={hit:!1,boardR:null,boardC:null,pos:e};return{title:e,length:t,hit:function(e){n[e].hit=!0,this.hits++},hits:0,position:n,isSunk:function(){for(let e=0;e<t;e++)if(0==n[e].hit)return!1;return!0}}},b=(e,t)=>{let n=[],o=[];for(let e=0;e<t;e++){n[e]=[];for(let o=0;o<t;o++)n[e][o]={row:e,col:o,hit:!1,ship:null}}return{title:e,squares:n,placeShip:function(e,t,r,i){o.push(e);for(let o=0;o<e.length;o++)i?(n[t][r+o].ship=e,n[t][r+o].shipPos=e.position[o],e.position[o].boardR=t,e.position[o].boardC=r+o):(n[t+o][r].ship=e,n[t+o][r].shipPos=e.position[o],e.position[o].boardR=t+o,e.position[o].boardC=r)},receiveAttack:function(e,t){return n[e][t].hit=!0,n[e][t].shipPos?(n[e][t].shipPos.hit=!0,"Hit"):"Miss"},allShipsSunk:function(){for(let e=0;e<o.length;e++)if(!o[e].isSunk())return!1;return!0}}},v=document.body;function y(e,t){!function(e,t,n){e.opponentBoard.squares[t][n].hit||1!=S?console.log("Invalid"):("Hit"===e.opponentBoard.receiveAttack(t,n)?(function(e,t){let n;n=C?document.getElementById("board1-"+e+t):document.getElementById("board2-"+e+t),n.textContent="x"}(t,n),e.opponentBoard.squares[t][n].ship.isSunk()&&(function(e){for(let t=0;t<e.length;t++){let n,o=e.position[t].boardR,r=e.position[t].boardC;n=C?document.getElementById("board1-"+o+r):document.getElementById("board2-"+o+r),n.style.backgroundColor="red"}}(e.opponentBoard.squares[t][n].ship),e.opponentBoard.allShipsSunk()&&(S=!1,document.querySelector("#display").textContent=C?"Player 1 has won!":"Player 2 has won!"))):function(e,t){let n;n=C?document.getElementById("board1-"+e+t):document.getElementById("board2-"+e+t),n.textContent="o"}(t,n),C=!C)}(C?x:I,e,t)}let C=!0,g=b("board1",10),B=b("board2",10),x=m("Me",g,B,!0),I=m("cpu",B,g,!1),S=!1;!function(){const e=document.createElement("div");e.id="header-div",e.textContent="Battleship",v.appendChild(e)}(),function(){const e=document.createElement("div");e.id="content",v.appendChild(e);const t=document.createElement("div");t.id="display",v.appendChild(t),function(){const e=document.querySelector("#content");for(;e.firstChild;)e.removeChild(e.firstChild);const t=document.createElement("div");t.id="board1",e.appendChild(t);for(let e=0;e<10;e++){let n=document.createElement("div");n.setAttribute("class","rows");for(let t=0;t<10;t++){let o=document.createElement("div");o.setAttribute("class","squares"),o.id="board1-"+e+t,o.addEventListener("click",(()=>{C&&y(e,t)})),n.appendChild(o)}t.appendChild(n)}const n=document.createElement("div");t.id="board2",e.appendChild(n);for(let e=0;e<10;e++){let t=document.createElement("div");t.setAttribute("class","rows");for(let n=0;n<10;n++){let o=document.createElement("div");o.setAttribute("class","squares"),o.id="board2-"+e+n,o.addEventListener("click",(()=>{C||y(e,n)})),t.appendChild(o)}n.appendChild(t)}}()}(),x.myBoard.placeShip(A("boat1-1",2),0,0,!0),x.myBoard.placeShip(A("boat2-1",2),1,1,!0),x.myBoard.placeShip(A("boat3-1",2),2,2,!0),I.myBoard.placeShip(A("boat1-2",2),0,0,!0),I.myBoard.placeShip(A("boat2-2",2),1,1,!0),I.myBoard.placeShip(A("boat3-2",2),2,2,!0),console.log(x.opponentBoard),console.log(I.opponentBoard),S=!0})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zaGlwcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL0RPTURpc3BsYXkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9nYW1lbG9vcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIiNoZWFkZXItZGl2IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICAgIGNvbG9yOiByZWQ7XFxufVxcblxcbiNjb250ZW50IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxuICAgIGJvcmRlcjogc29saWQ7XFxufVxcblxcbi5yb3dzIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG59XFxuXFxuLnNxdWFyZXMge1xcbiAgICBvdXRsaW5lOiBzb2xpZDtcXG4gICAgb3V0bGluZS13aWR0aDogMXB4O1xcbiAgICB3aWR0aDogMjBweDtcXG4gICAgaGVpZ2h0OiAyMHB4O1xcbiAgICBtYXJnaW46IDJweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ2FpbnNib3JvO1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksdUJBQXVCO0lBQ3ZCLFVBQVU7QUFDZDs7QUFFQTtJQUNJLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsbUJBQW1CO0lBQ25CLDZCQUE2QjtJQUM3QixhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLGNBQWM7SUFDZCxrQkFBa0I7SUFDbEIsV0FBVztJQUNYLFlBQVk7SUFDWixXQUFXO0lBQ1gsMkJBQTJCO0FBQy9CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiNoZWFkZXItZGl2IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICAgIGNvbG9yOiByZWQ7XFxufVxcblxcbiNjb250ZW50IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxuICAgIGJvcmRlcjogc29saWQ7XFxufVxcblxcbi5yb3dzIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG59XFxuXFxuLnNxdWFyZXMge1xcbiAgICBvdXRsaW5lOiBzb2xpZDtcXG4gICAgb3V0bGluZS13aWR0aDogMXB4O1xcbiAgICB3aWR0aDogMjBweDtcXG4gICAgaGVpZ2h0OiAyMHB4O1xcbiAgICBtYXJnaW46IDJweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ2FpbnNib3JvO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoc3R5bGUsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGUpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoXCJtZWRpYVwiKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZSwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGUpIHtcbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7R2FtZWJvYXJkfSBmcm9tICcuL2dhbWVib2FyZC5qcyc7XG5cbmNvbnN0IFBsYXllciA9ICh0aXRsZSwgbXlCb2FyZCwgb3Bwb25lbnRCb2FyZCwgaHVtYW4pID0+IHtcblxuICAgIGZ1bmN0aW9uIHJhbmRvbVNwb3QgKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDggLSAwKSArIDApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3B1UmFuZG9tQXR0YWNrICgpIHtcbiAgICAgICAgbGV0IHJvdyA9IHJhbmRvbVNwb3QoKTtcbiAgICAgICAgbGV0IGNvbCA9IHJhbmRvbVNwb3QoKTtcbiAgICAgICAgd2hpbGUgKG9wcG9uZW50Qm9hcmQuc3F1YXJlc1tyb3ddW2NvbF0uaGl0KSB7XG4gICAgICAgICAgICByb3cgPSByYW5kb21TcG90KCk7XG4gICAgICAgICAgICBjb2wgPSByYW5kb21TcG90KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wcG9uZW50Qm9hcmQucmVjZWl2ZUF0dGFjayhyb3csIGNvbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIG15Qm9hcmQsXG4gICAgICAgIGh1bWFuLFxuICAgICAgICBvcHBvbmVudEJvYXJkLFxuICAgICAgICBjcHVSYW5kb21BdHRhY2ssXG4gICAgfVxufVxuXG5leHBvcnQge1BsYXllcn07IiwiY29uc3QgU2hpcCA9ICh0aXRsZSwgbGVuZ3RoKSA9PiB7XG4gICAgbGV0IGhpdHMgPSAwO1xuICAgIGxldCBwb3NpdGlvbiA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBwb3NpdGlvbltpXSA9IHtcbiAgICAgICAgICAgIGhpdDogZmFsc2UsXG4gICAgICAgICAgICBib2FyZFI6IG51bGwsXG4gICAgICAgICAgICBib2FyZEM6IG51bGwsXG4gICAgICAgICAgICBwb3M6IGksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGl0IChwb3MpIHtcbiAgICAgICAgcG9zaXRpb25bcG9zXS5oaXQgPSB0cnVlO1xuICAgICAgICB0aGlzLmhpdHMrKztcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaXNTdW5rICgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHBvc2l0aW9uW2ldLmhpdCA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0aXRsZSxcbiAgICAgICAgbGVuZ3RoLFxuICAgICAgICBoaXQsXG4gICAgICAgIGhpdHMsXG4gICAgICAgIHBvc2l0aW9uLFxuICAgICAgICBpc1N1bmtcbiAgICB9XG59XG5cblxuXG5leHBvcnQge1NoaXB9OyIsImltcG9ydCB7U2hpcH0gZnJvbSAnLi9zaGlwcyc7XG5cbmNvbnN0IEdhbWVib2FyZCA9ICh0aXRsZSwgbGVuZ3RoKSA9PiB7XG4gICAgbGV0IHNxdWFyZXMgPSBbXTtcbiAgICBsZXQgc2hpcHMgPSBbXTtcblxuICAgIGZvciAobGV0IHIgPSAwOyByIDwgbGVuZ3RoOyByKyspIHtcbiAgICAgICAgc3F1YXJlc1tyXSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IGxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBzcXVhcmVzW3JdW2NdID0ge1xuICAgICAgICAgICAgICAgIHJvdzogcixcbiAgICAgICAgICAgICAgICBjb2w6IGMsXG4gICAgICAgICAgICAgICAgaGl0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaGlwOiBudWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBwbGFjZVNoaXAoc2hpcCwgc3RhcnRpbmdSb3csIHN0YXJ0aW5nQ29sLCBob3Jpem9udGFsKSB7XG4gICAgICAgIHNoaXBzLnB1c2goc2hpcCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGhvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICBzcXVhcmVzW3N0YXJ0aW5nUm93XVtzdGFydGluZ0NvbCArIGldLnNoaXAgPSBzaGlwO1xuICAgICAgICAgICAgICAgIHNxdWFyZXNbc3RhcnRpbmdSb3ddW3N0YXJ0aW5nQ29sICsgaV0uc2hpcFBvcyA9IHNoaXAucG9zaXRpb25baV07XG4gICAgICAgICAgICAgICAgc2hpcC5wb3NpdGlvbltpXS5ib2FyZFIgPSBzdGFydGluZ1JvdztcbiAgICAgICAgICAgICAgICBzaGlwLnBvc2l0aW9uW2ldLmJvYXJkQyA9IHN0YXJ0aW5nQ29sICsgaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNxdWFyZXNbc3RhcnRpbmdSb3cgKyBpXVtzdGFydGluZ0NvbF0uc2hpcCA9IHNoaXA7XG4gICAgICAgICAgICAgICAgc3F1YXJlc1tzdGFydGluZ1JvdyArIGldW3N0YXJ0aW5nQ29sXS5zaGlwUG9zID0gc2hpcC5wb3NpdGlvbltpXTtcbiAgICAgICAgICAgICAgICBzaGlwLnBvc2l0aW9uW2ldLmJvYXJkUiA9IHN0YXJ0aW5nUm93ICsgaTtcbiAgICAgICAgICAgICAgICBzaGlwLnBvc2l0aW9uW2ldLmJvYXJkQyA9IHN0YXJ0aW5nQ29sO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWNlaXZlQXR0YWNrIChyb3csIGNvbCkge1xuICAgICAgICBzcXVhcmVzW3Jvd11bY29sXS5oaXQgPSB0cnVlO1xuICAgICAgICBpZiAoc3F1YXJlc1tyb3ddW2NvbF0uc2hpcFBvcykge1xuICAgICAgICAgICAgc3F1YXJlc1tyb3ddW2NvbF0uc2hpcFBvcy5oaXQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuICdIaXQnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICdNaXNzJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFsbFNoaXBzU3VuayAoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICghc2hpcHNbaV0uaXNTdW5rKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIHNxdWFyZXMsXG4gICAgICAgIHBsYWNlU2hpcCxcbiAgICAgICAgcmVjZWl2ZUF0dGFjayxcbiAgICAgICAgYWxsU2hpcHNTdW5rLFxuICAgIH1cbn1cblxuZXhwb3J0IHtHYW1lYm9hcmR9OyIsImltcG9ydCB7cGxheWVyMVR1cm4sIHBsYXllcjEsIHBsYXllcjIsIGF0dGFja30gZnJvbSAnLi9nYW1lbG9vcCc7XG5cbmNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuXG5mdW5jdGlvbiBjcmVhdGVMYXlvdXQgKCkge1xuICAgIGRpc3BsYXlIZWFkZXIoKTtcbiAgICBjcmVhdGVIVE1MKCk7XG59XG5cbmZ1bmN0aW9uIGRpc3BsYXlIZWFkZXIgKCkge1xuICAgIGNvbnN0IGhlYWRlckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGhlYWRlckRpdi5pZCA9ICdoZWFkZXItZGl2JztcbiAgICBoZWFkZXJEaXYudGV4dENvbnRlbnQgPSAnQmF0dGxlc2hpcCc7XG5cbiAgICBib2R5LmFwcGVuZENoaWxkKGhlYWRlckRpdik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhUTUwgKCkge1xuICAgIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250ZW50LmlkID0gJ2NvbnRlbnQnO1xuXG4gICAgYm9keS5hcHBlbmRDaGlsZChjb250ZW50KTtcblxuICAgIGNvbnN0IGRpc3BsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXNwbGF5LmlkID0gJ2Rpc3BsYXknO1xuXG4gICAgYm9keS5hcHBlbmRDaGlsZChkaXNwbGF5KTtcbiAgICBcbiAgICBjcmVhdGVFbXB0eUJvYXJkcygpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFbXB0eUJvYXJkcyAoKSB7XG4gICAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb250ZW50Jyk7XG4gICAgd2hpbGUgKGNvbnRlbnQuZmlyc3RDaGlsZCkge1xuICAgICAgICBjb250ZW50LnJlbW92ZUNoaWxkKGNvbnRlbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgY29uc3QgYm9hcmQxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgYm9hcmQxLmlkID0gJ2JvYXJkMSc7XG5cbiAgICBjb250ZW50LmFwcGVuZENoaWxkKGJvYXJkMSk7XG5cbiAgICBmb3IgKGxldCByID0gMDsgciA8IDEwOyByKyspIHtcbiAgICAgICAgbGV0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgIHJvdy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3Jvd3MnKTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCAxMDsgYysrKSB7XG4gICAgICAgICAgICBsZXQgY29sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBjb2wuc2V0QXR0cmlidXRlKCdjbGFzcycsICdzcXVhcmVzJyk7XG4gICAgICAgICAgICBjb2wuaWQgPSAoJ2JvYXJkMS0nICsgciArIGMpO1xuICAgICAgICAgICAgY29sLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIxVHVybikge1xuICAgICAgICAgICAgICAgICAgICBjbGlja0V2ZW50KHIsIGMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGNvbCk7XG4gICAgICAgIH1cbiAgICAgICAgYm9hcmQxLmFwcGVuZENoaWxkKHJvdyk7XG4gICAgfVxuXG4gICAgY29uc3QgYm9hcmQyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgYm9hcmQxLmlkID0gJ2JvYXJkMic7XG5cbiAgICBjb250ZW50LmFwcGVuZENoaWxkKGJvYXJkMik7XG5cbiAgICBmb3IgKGxldCByID0gMDsgciA8IDEwOyByKyspIHtcbiAgICAgICAgbGV0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgIHJvdy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3Jvd3MnKTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCAxMDsgYysrKSB7XG4gICAgICAgICAgICBsZXQgY29sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBjb2wuc2V0QXR0cmlidXRlKCdjbGFzcycsICdzcXVhcmVzJyk7XG4gICAgICAgICAgICBjb2wuaWQgPSAoJ2JvYXJkMi0nICsgciArIGMpO1xuICAgICAgICAgICAgY29sLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghcGxheWVyMVR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2tFdmVudChyLCBjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChjb2wpO1xuICAgICAgICB9XG4gICAgICAgIGJvYXJkMi5hcHBlbmRDaGlsZChyb3cpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY2xpY2tFdmVudCAociwgYykge1xuICAgIGlmIChwbGF5ZXIxVHVybikge1xuICAgICAgICBhdHRhY2socGxheWVyMSwgciwgYylcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGF0dGFjayhwbGF5ZXIyLCByLCBjKVxuICAgIH1cbn1cblxuZnVuY3Rpb24gaGl0VXBkYXRlIChyLCBjKSB7XG4gICAgbGV0IHNxdWFyZTtcbiAgICBpZiAocGxheWVyMVR1cm4pIHtcbiAgICAgICAgc3F1YXJlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JvYXJkMS0nICsgciArIGMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3F1YXJlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JvYXJkMi0nICsgciArIGMpO1xuICAgIH1cbiAgICBzcXVhcmUudGV4dENvbnRlbnQgPSAneCc7XG59XG5cbmZ1bmN0aW9uIG1pc3NVcGRhdGUgKHIsYykge1xuICAgIGxldCBzcXVhcmU7XG4gICAgaWYgKHBsYXllcjFUdXJuKSB7XG4gICAgICAgIHNxdWFyZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdib2FyZDEtJyArIHIgKyBjKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNxdWFyZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdib2FyZDItJyArIHIgKyBjKTtcbiAgICB9XG4gICAgc3F1YXJlLnRleHRDb250ZW50ID0gJ28nO1xufVxuXG5mdW5jdGlvbiBzaGlwRGVzdHJveWVkIChzaGlwKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCByID0gc2hpcC5wb3NpdGlvbltpXS5ib2FyZFI7XG4gICAgICAgIGxldCBjID0gc2hpcC5wb3NpdGlvbltpXS5ib2FyZEM7XG4gICAgICAgIGxldCBzcXVhcmU7XG4gICAgICAgIGlmIChwbGF5ZXIxVHVybikge1xuICAgICAgICAgICAgc3F1YXJlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JvYXJkMS0nICsgciArIGMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3F1YXJlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JvYXJkMi0nICsgciArIGMpO1xuICAgICAgICB9XG4gICAgICAgIHNxdWFyZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmVkJztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdhbWVPdmVyICgpIHtcbiAgICBjb25zdCBkaXNwbGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Rpc3BsYXknKTtcbiAgICBpZiAocGxheWVyMVR1cm4pIHtcbiAgICAgICAgZGlzcGxheS50ZXh0Q29udGVudCA9ICdQbGF5ZXIgMSBoYXMgd29uISc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBkaXNwbGF5LnRleHRDb250ZW50ID0gJ1BsYXllciAyIGhhcyB3b24hJztcbiAgICB9XG59XG5cblxuZXhwb3J0IHtjcmVhdGVMYXlvdXQsIGhpdFVwZGF0ZSwgbWlzc1VwZGF0ZSwgc2hpcERlc3Ryb3llZCwgZ2FtZU92ZXJ9OyIsImltcG9ydCB7IFBsYXllciB9IGZyb20gJy4vcGxheWVyJztcbmltcG9ydCB7IFNoaXAgfSBmcm9tICcuL3NoaXBzJztcbmltcG9ydCB7IEdhbWVib2FyZCB9IGZyb20gJy4vZ2FtZWJvYXJkJztcbmltcG9ydCB7IGhpdFVwZGF0ZSwgbWlzc1VwZGF0ZSwgc2hpcERlc3Ryb3llZCwgZ2FtZU92ZXIgfSBmcm9tICcuL0RPTURpc3BsYXknO1xuXG5sZXQgcGxheWVyMVR1cm4gPSB0cnVlO1xubGV0IGJvYXJkMSA9IEdhbWVib2FyZCgnYm9hcmQxJywgMTApO1xubGV0IGJvYXJkMiA9IEdhbWVib2FyZCgnYm9hcmQyJywgMTApO1xubGV0IHBsYXllcjEgPSBQbGF5ZXIoJ01lJywgYm9hcmQxLCBib2FyZDIsIHRydWUpO1xubGV0IHBsYXllcjIgPSBQbGF5ZXIoJ2NwdScsIGJvYXJkMiwgYm9hcmQxLCBmYWxzZSk7XG5sZXQgZ2FtZSA9IGZhbHNlO1xuXG5mdW5jdGlvbiBjcmVhdGVHYW1lUmFuZG9tICgpIHtcblxuICAgIFxuXG4gICAgcGxheWVyMS5teUJvYXJkLnBsYWNlU2hpcChTaGlwKCdib2F0MS0xJywgMiksIDAsIDAsIHRydWUpO1xuICAgIHBsYXllcjEubXlCb2FyZC5wbGFjZVNoaXAoU2hpcCgnYm9hdDItMScsIDIpLCAxLCAxLCB0cnVlKTtcbiAgICBwbGF5ZXIxLm15Qm9hcmQucGxhY2VTaGlwKFNoaXAoJ2JvYXQzLTEnLCAyKSwgMiwgMiwgdHJ1ZSk7XG5cbiAgICBwbGF5ZXIyLm15Qm9hcmQucGxhY2VTaGlwKFNoaXAoJ2JvYXQxLTInLCAyKSwgMCwgMCwgdHJ1ZSk7XG4gICAgcGxheWVyMi5teUJvYXJkLnBsYWNlU2hpcChTaGlwKCdib2F0Mi0yJywgMiksIDEsIDEsIHRydWUpO1xuICAgIHBsYXllcjIubXlCb2FyZC5wbGFjZVNoaXAoU2hpcCgnYm9hdDMtMicsIDIpLCAyLCAyLCB0cnVlKTtcblxuICAgIGNvbnNvbGUubG9nKHBsYXllcjEub3Bwb25lbnRCb2FyZCk7XG4gICAgY29uc29sZS5sb2cocGxheWVyMi5vcHBvbmVudEJvYXJkKTtcbiAgICBnYW1lID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcGxheUdhbWUgKCkge1xuXG59XG5cbmZ1bmN0aW9uIGF0dGFjayAocGxheWVyLCByLCBjKSB7XG4gICAgaWYgKCFwbGF5ZXIub3Bwb25lbnRCb2FyZC5zcXVhcmVzW3JdW2NdLmhpdCAmJiBnYW1lID09IHRydWUpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHBsYXllci5vcHBvbmVudEJvYXJkLnJlY2VpdmVBdHRhY2sociwgYyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09ICdIaXQnKSB7XG4gICAgICAgICAgICBoaXRVcGRhdGUociwgYyk7XG4gICAgICAgICAgICBpZiAocGxheWVyLm9wcG9uZW50Qm9hcmQuc3F1YXJlc1tyXVtjXS5zaGlwLmlzU3VuaygpKSB7XG4gICAgICAgICAgICAgICAgc2hpcERlc3Ryb3llZChwbGF5ZXIub3Bwb25lbnRCb2FyZC5zcXVhcmVzW3JdW2NdLnNoaXApO1xuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIub3Bwb25lbnRCb2FyZC5hbGxTaGlwc1N1bmsoKSkge1xuICAgICAgICAgICAgICAgICAgICBnYW1lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGdhbWVPdmVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWlzc1VwZGF0ZShyLCBjKTtcbiAgICAgICAgfVxuICAgICAgICBwbGF5ZXIxVHVybiA9ICFwbGF5ZXIxVHVybjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdJbnZhbGlkJyk7XG4gICAgfVxufVxuXG5leHBvcnQge2NyZWF0ZUdhbWVSYW5kb20sIHBsYXllcjFUdXJuLCBwbGF5ZXIxLCBwbGF5ZXIyLCBhdHRhY2t9OyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJfaSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcyIsIl9lIiwiX2FyciIsIl9uIiwiX2QiLCJjYWxsIiwibmV4dCIsImRvbmUiLCJ2YWx1ZSIsImVyciIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm8iLCJtaW5MZW4iLCJuIiwiT2JqZWN0IiwicHJvdG90eXBlIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwicmVtb3ZlQXR0cmlidXRlIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJQbGF5ZXIiLCJ0aXRsZSIsIm15Qm9hcmQiLCJvcHBvbmVudEJvYXJkIiwiaHVtYW4iLCJyYW5kb21TcG90IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY3B1UmFuZG9tQXR0YWNrIiwicm93IiwiY29sIiwic3F1YXJlcyIsImhpdCIsInJlY2VpdmVBdHRhY2siLCJTaGlwIiwicG9zaXRpb24iLCJib2FyZFIiLCJib2FyZEMiLCJwb3MiLCJoaXRzIiwiaXNTdW5rIiwiR2FtZWJvYXJkIiwic2hpcHMiLCJyIiwiYyIsInNoaXAiLCJwbGFjZVNoaXAiLCJzdGFydGluZ1JvdyIsInN0YXJ0aW5nQ29sIiwiaG9yaXpvbnRhbCIsInNoaXBQb3MiLCJhbGxTaGlwc1N1bmsiLCJib2R5IiwiY2xpY2tFdmVudCIsInBsYXllciIsImdhbWUiLCJjb25zb2xlIiwibG9nIiwic3F1YXJlIiwicGxheWVyMVR1cm4iLCJnZXRFbGVtZW50QnlJZCIsInRleHRDb250ZW50IiwiaGl0VXBkYXRlIiwiYmFja2dyb3VuZENvbG9yIiwic2hpcERlc3Ryb3llZCIsIm1pc3NVcGRhdGUiLCJhdHRhY2siLCJwbGF5ZXIxIiwicGxheWVyMiIsImJvYXJkMSIsImJvYXJkMiIsImhlYWRlckRpdiIsImRpc3BsYXlIZWFkZXIiLCJkaXNwbGF5IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNyZWF0ZUVtcHR5Qm9hcmRzIiwiY3JlYXRlSFRNTCJdLCJzb3VyY2VSb290IjoiIn0=