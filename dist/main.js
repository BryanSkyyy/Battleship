(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(15),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([e.id,"#header-div {\n    background-color: black;\n    color: red;\n}\n\n#setup-area {\n    width: 100%;\n    height: 150px;\n    border: dashed;\n}\n\n#content {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-evenly;\n    border: solid;\n}\n\n.rows {\n    display: flex;\n    flex-direction: row;\n}\n\n.squares {\n    outline: solid;\n    outline-width: 1px;\n    width: 20px;\n    height: 20px;\n    margin: 2px;\n    background-color: gainsboro;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,uBAAuB;IACvB,UAAU;AACd;;AAEA;IACI,WAAW;IACX,aAAa;IACb,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,mBAAmB;IACnB,6BAA6B;IAC7B,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,cAAc;IACd,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,WAAW;IACX,2BAA2B;AAC/B",sourcesContent:["#header-div {\n    background-color: black;\n    color: red;\n}\n\n#setup-area {\n    width: 100%;\n    height: 150px;\n    border: dashed;\n}\n\n#content {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-evenly;\n    border: solid;\n}\n\n.rows {\n    display: flex;\n    flex-direction: row;\n}\n\n.squares {\n    outline: solid;\n    outline-width: 1px;\n    width: 20px;\n    height: 20px;\n    margin: 2px;\n    background-color: gainsboro;\n}"],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);o&&r[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e.exports=function(e){var n,o,r=(o=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var o,r,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(o=n.next()).done)&&(i.push(o.value),!t||i.length!==t);a=!0);}catch(e){s=!0,r=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw r}}return i}}(n,o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],a=r[3];if(!a)return i;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),d="/*# ".concat(l," */"),c=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(c).concat([d]).join("\n")}return[i].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],d=o.base?l[0]+o.base:l[0],c=i[d]||0,u="".concat(d," ").concat(c);i[d]=c+1;var p=n(u),f={css:l[1],media:l[2],sourceMap:l[3]};-1!==p?(t[p].references++,t[p].updater(f)):t.push({identifier:u,updater:r(f,o),references:1}),a.push(u)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var l=o(e,r),d=0;d<i.length;d++){var c=n(i[d]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=l}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o=n.css,r=n.media,i=n.sourceMap;r?e.setAttribute("media",r):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),i=n(569),a=n.n(i),s=n(565),l=n.n(s),d=n(216),c=n.n(d),u=n(589),p=n.n(u),f=n(426),h={};h.styleTagTransform=p(),h.setAttributes=l(),h.insert=a().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=c(),t()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals;const m=(e,t,n,o)=>{let r,i,a=!1,s=0,l=!1,d=!0,c=!0,u=!0,p=!0;function f(){return Math.floor(10*Math.random()+0)}function h(){console.log("random");let e=f(),t=f();for(;n.squares[e][t].hit;)e=f(),t=f();return n.squares[e][t].ship&&(a=!0,r=e,i=t),[e,t]}return{title:e,myBoard:t,human:o,opponentBoard:n,cpuRandomAttack:h,cpuFoundAttack:function(){if(console.log("found"),console.log(this),console.log(n),this.opponentBoard.squares[this.shipFoundR][this.shipFoundC].ship.sunk)a=!1,s=0,d=!0,c=!0,u=!0,p=!0,h();else{if(l||(s=0),d&&i+s>9?d=!1:c&&i+s<0?c=!1:u&&i+s<0?u=!1:p&&i+s>9&&(p=!1),d)return s++,n.squares[r][i+s].ship?(u=!1,p=!1,l=!0):(d=!1,l=!1),[r,i+s];if(c)return s--,n.squares[r][i+s].ship?(u=!1,p=!1,l=!0):(c=!1,l=!1),[r,i+s];if(u)return s--,n.squares[r+s][i].ship?(c=!1,d=!1,l=!0):(u=!1,l=!1),[r+s,i];if(p)return s++,n.squares[r+s][i].ship?(c=!1,l=!0):(p=!1,l=!1),[r+s,i]}},shipFound:a}},A=(e,t)=>{let n=[],o=[];for(let e=0;e<t;e++){n[e]=[];for(let o=0;o<t;o++)n[e][o]={row:e,col:o,hit:!1,ship:null,shipHere:!1,shipPart:null}}return{title:e,squares:n,placeShip:function(e,t,r,i){o.push(e);for(let o=0;o<e.length;o++)i?(n[t][r+o].ship=e,n[t][r+o].shipHere=!0,n[t][r+o].shipPart=o,e.position[o].boardR=t,e.position[o].boardC=r+o):(n[t+o][r].ship=e,n[t+o][r].shipHere=!0,n[t+o][r].shipPart=o,e.position[o].boardR=t+o,e.position[o].boardC=r)},receiveAttack:function(e,t){return n[e][t].hit=!0,n[e][t].shipHere?(n[e][t].ship.hit(n[e][t].shipPart),"Hit"):"Miss"},allShipsSunk:function(){for(let e=0;e<o.length;e++)if(!o[e].isSunk())return!1;return!0}}},b=(e,t)=>{let n=[],o=!1;for(let e=0;e<t;e++)n[e]={hit:!1,boardR:null,boardC:null,pos:e};return{title:e,length:t,hit:function(e){n[e].hit=!0,this.hits++},hits:0,position:n,isSunk:function(){for(let e=0;e<t;e++)if(0==n[e].hit)return!1;return o=!0,!0},sunk:o}},y=document.body;function v(e,t){let n;if(t+4<11){n=!0;for(let o=0;o<4;o++)k.myBoard.squares[e][t+o].ship&&(n=!1);if(n)for(let n=0;n<4;n++)document.getElementById("board1-"+e+(t+n)).style.backgroundColor="cyan";else k.myBoard.squares[e][t].ship||(document.getElementById("board1-"+e+t).style.backgroundColor="pink")}else k.myBoard.squares[e][t].ship||(document.getElementById("board1-"+e+t).style.backgroundColor="pink")}function g(e,t){let n=!0;if(t+4<11){for(let o=0;o<4;o++)k.myBoard.squares[e][t+o].ship&&(n=!1);if(n)for(let n=0;n<4;n++)document.getElementById("board1-"+e+(t+n)).style.backgroundColor="gainsboro";else k.myBoard.squares[e][t].ship||(document.getElementById("board1-"+e+t).style.backgroundColor="gainsboro")}else k.myBoard.squares[e][t].ship||(document.getElementById("board1-"+e+t).style.backgroundColor="gainsboro")}function C(e,t){let n=!0;if(t+4<11){for(let o=0;o<4;o++)k.myBoard.squares[e][t+o].ship&&(n=!1);if(n){k.myBoard.placeShip(b("boat1-1",4),e,t,!0);for(let n=0;n<4;n++)document.getElementById("board1-"+e+(t+n)).style.backgroundColor="blue"}}}function B(e,t){S(I?k:w,e,t)}let I=!0,E=A("board1",10),x=A("board2",10),k=m("Me",E,x,!0),w=m("cpu",x,E,!1),q=!1;function S(e,t,n){if(!e.opponentBoard.squares[t][n].hit&&1==q){console.log(e,t,n);let o=e.opponentBoard.receiveAttack(t,n);console.log(o),"Hit"===o?(console.log(e,"hit"),function(e,t){let n;n=I?document.getElementById("board2-"+e+t):document.getElementById("board1-"+e+t),n.textContent="x"}(t,n),e.opponentBoard.squares[t][n].ship.isSunk()&&(function(e){for(let t=0;t<e.length;t++){let n,o=e.position[t].boardR,r=e.position[t].boardC;n=I?document.getElementById("board2-"+o+r):document.getElementById("board1-"+o+r),n.style.backgroundColor="red"}}(e.opponentBoard.squares[t][n].ship),e.opponentBoard.allShipsSunk()&&(q=!1,document.querySelector("#display").textContent=I?"Player 1 has won!":"Player 2 has won!"))):(console.log(e,"miss"),function(e,t){let n;n=I?document.getElementById("board2-"+e+t):document.getElementById("board1-"+e+t),n.textContent="o"}(t,n),I=!I)}if(!I){let e=[];console.log(w),e=w.shipFound?w.cpuFoundAttack():w.cpuRandomAttack(),S(w,e[0],e[1])}}!function(){const e=document.createElement("div");e.id="header-div",e.textContent="Battleship",y.appendChild(e)}(),function(){const e=document.createElement("div");e.id="setup-area",y.appendChild(e)}(),function(){const e=document.createElement("div");e.id="content",y.appendChild(e);const t=document.createElement("div");t.id="display",y.appendChild(t),function(){const e=document.querySelector("#content");for(;e.firstChild;)e.removeChild(e.firstChild);const t=document.createElement("div");t.id="board1",e.appendChild(t);for(let e=0;e<10;e++){let n=document.createElement("div");n.setAttribute("class","rows");for(let t=0;t<10;t++){let o=document.createElement("div");o.setAttribute("class","squares"),o.id="board1-"+e+t,o.addEventListener("mouseenter",(()=>{q||v(e,t)})),o.addEventListener("mouseleave",(()=>{q||g(e,t)})),o.addEventListener("click",(n=>{console.log(n),!I&&q&&B(e,t),q||C(e,t)})),n.appendChild(o)}t.appendChild(n)}const n=document.createElement("div");t.id="board2",e.appendChild(n);for(let e=0;e<10;e++){let t=document.createElement("div");t.setAttribute("class","rows");for(let n=0;n<10;n++){let o=document.createElement("div");o.setAttribute("class","squares"),o.id="board2-"+e+n,o.addEventListener("click",(()=>{I&&q&&B(e,n)})),t.appendChild(o)}n.appendChild(t)}}()}(),function(){const e=document.getElementById("setup-area"),t=document.createElement("div");t.textContent="start game",t.addEventListener("click",(()=>{q=!0,console.log(q)})),e.appendChild(t);const n=document.createElement("div");n.id="ship-div",e.appendChild(n)}(),document.getElementById("ship-div").textContent="Place ship of length 4."})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,