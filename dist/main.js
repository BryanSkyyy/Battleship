(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>a});var o=n(15),r=n.n(o),i=n(645),s=n.n(i)()(r());s.push([e.id,"#header-div {\n    background-color: black;\n    color: red;\n}\n\n#setup-area {\n    width: 100%;\n    height: 150px;\n    border: dashed;\n}\n\n#content {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-evenly;\n    border: solid;\n}\n\n.rows {\n    display: flex;\n    flex-direction: row;\n}\n\n.squares {\n    outline: solid;\n    outline-width: 1px;\n    width: 20px;\n    height: 20px;\n    margin: 2px;\n    background-color: gainsboro;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,uBAAuB;IACvB,UAAU;AACd;;AAEA;IACI,WAAW;IACX,aAAa;IACb,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,mBAAmB;IACnB,6BAA6B;IAC7B,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,cAAc;IACd,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,WAAW;IACX,2BAA2B;AAC/B",sourcesContent:["#header-div {\n    background-color: black;\n    color: red;\n}\n\n#setup-area {\n    width: 100%;\n    height: 150px;\n    border: dashed;\n}\n\n#content {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-evenly;\n    border: solid;\n}\n\n.rows {\n    display: flex;\n    flex-direction: row;\n}\n\n.squares {\n    outline: solid;\n    outline-width: 1px;\n    width: 20px;\n    height: 20px;\n    margin: 2px;\n    background-color: gainsboro;\n}"],sourceRoot:""}]);const a=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(r[s]=!0)}for(var a=0;a<e.length;a++){var d=[].concat(e[a]);o&&r[d[0]]||(n&&(d[2]?d[2]="".concat(n," and ").concat(d[2]):d[2]=n),t.push(d))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e.exports=function(e){var n,o,r=(o=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var o,r,i=[],s=!0,a=!1;try{for(n=n.call(e);!(s=(o=n.next()).done)&&(i.push(o.value),!t||i.length!==t);s=!0);}catch(e){a=!0,r=e}finally{try{s||null==n.return||n.return()}finally{if(a)throw r}}return i}}(n,o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],s=r[3];if(!s)return i;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),c="/*# ".concat(d," */"),u=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[i].concat(u).concat([c]).join("\n")}return[i].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},s=[],a=0;a<e.length;a++){var d=e[a],c=o.base?d[0]+o.base:d[0],u=i[c]||0,l="".concat(c," ").concat(u);i[c]=u+1;var p=n(l),h={css:d[1],media:d[2],sourceMap:d[3]};-1!==p?(t[p].references++,t[p].updater(h)):t.push({identifier:l,updater:r(h,o),references:1}),s.push(l)}return s}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=n(i[s]);t[a].references--}for(var d=o(e,r),c=0;c<i.length;c++){var u=n(i[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=d}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o=n.css,r=n.media,i=n.sourceMap;r?e.setAttribute("media",r):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),i=n(569),s=n.n(i),a=n(565),d=n.n(a),c=n(216),u=n.n(c),l=n(589),p=n.n(l),h=n(426),f={};f.styleTagTransform=p(),f.setAttributes=d(),f.insert=s().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=u(),t()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;const m=(e,t,n,o)=>{let r={shipFound:!1,shipFoundR:0,shipFoundC:0,move:0,lastHit:!1,goRight:!0,goLeft:!0,goUp:!0,goDown:!0,coords:{r:0,c:0}};function i(){return Math.floor(10*Math.random()+0)}function s(){console.log("in random");let e=i(),t=i();for(;n.squares[e][t].hit;)e=i(),t=i();return n.squares[e][t].shipHere&&(r.shipFound=!0,r.shipFoundR=e,r.shipFoundC=t),r.coords.r=e,r.coords.c=t,r.coords}return{title:e,myBoard:t,human:o,opponentBoard:n,cpuRandomAttack:s,cpuFoundAttack:function(){if(n.squares[r.shipFoundR][r.shipFoundC].ship.sunk)r.shipFound=!1,r.shipFoundR=0,r.shipFoundC=0,r.move=0,r.lastHit=!1,r.goRight=!0,r.goLeft=!0,r.goUp=!0,r.goDown=!0,s();else{if(r.lastHit||(r.move=0),r.goRight&&r.shipFoundC+r.move>9?r.goRight=!1:r.goLeft&&r.shipFoundC+r.move<0?r.goLeft=!1:r.goUp&&r.shipFoundC+r.move<0?r.goUp=!1:r.goDown&&r.shipFoundC+r.move>9&&(r.goDown=!1),r.goRight)return r.move++,n.squares[r.shipFoundR][r.shipFoundC+r.move].ship?(r.goUp=!1,r.goDown=!1,r.lastHit=!0):(r.goRight=!1,r.lastHit=!1),r.coords.r=r.shipFoundR,r.coords.c=r.shipFoundC+r.move,r.coords;if(r.goLeft)return r.move--,n.squares[r.shipFoundR][r.shipFoundC+r.move].ship?(r.goUp=!1,r.goDown=!1,r.lastHit=!0):(r.goLeft=!1,r.lastHit=!1),r.coords.r=r.shipFoundR,r.coords.c=r.shipFoundC+r.move,r.coords;if(r.goUp)return r.move--,n.squares[r.shipFoundR+r.move][r.shipFoundC].ship?(r.goLeft=!1,r.goRight=!1,r.lastHit=!0):(r.goUp=!1,r.lastHit=!1),r.coords.r=r.shipFoundR+r.move,r.coords.c=r.shipFoundC,coords;if(r.goDown)return r.move++,n.squares[r.shipFoundR+r.move][r.shipFoundC].ship?(r.goLeft=!1,r.lastHit=!0):(r.goDown=!1,r.lastHit=!1),r.coords.r=shipFoundR+move,r.coords.c=shipFoundC,r.coords}},cpuInfo:r}},g=(e,t)=>{let n=[],o=[];for(let e=0;e<t;e++){n[e]=[];for(let o=0;o<t;o++)n[e][o]={row:e,col:o,hit:!1,ship:null,shipHere:!1,shipPart:null}}return{title:e,squares:n,placeShip:function(e,t,r,i){o.push(e);for(let o=0;o<e.length;o++)i?(n[t][r+o].ship=e,n[t][r+o].shipHere=!0,n[t][r+o].shipPart=o,e.position[o].boardR=t,e.position[o].boardC=r+o):(n[t+o][r].ship=e,n[t+o][r].shipHere=!0,n[t+o][r].shipPart=o,e.position[o].boardR=t+o,e.position[o].boardC=r)},receiveAttack:function(e,t){return n[e][t].hit=!0,n[e][t].shipHere?(n[e][t].ship.hit(n[e][t].shipPart),"Hit"):"Miss"},allShipsSunk:function(){for(let e=0;e<o.length;e++)if(!o[e].isSunk())return!1;return!0}}},A=document.body;function v(e,t){let n;if(t+4<11){n=!0;for(let o=0;o<4;o++)x.myBoard.squares[e][t+o].ship&&(n=!1);if(n)for(let n=0;n<4;n++)document.getElementById("board1-"+e+(t+n)).style.backgroundColor="cyan";else x.myBoard.squares[e][t].ship||(document.getElementById("board1-"+e+t).style.backgroundColor="pink")}else x.myBoard.squares[e][t].ship||(document.getElementById("board1-"+e+t).style.backgroundColor="pink")}function b(e,t){let n=!0;if(t+4<11){for(let o=0;o<4;o++)x.myBoard.squares[e][t+o].ship&&(n=!1);if(n)for(let n=0;n<4;n++)document.getElementById("board1-"+e+(t+n)).style.backgroundColor="gainsboro";else x.myBoard.squares[e][t].ship||(document.getElementById("board1-"+e+t).style.backgroundColor="gainsboro")}else x.myBoard.squares[e][t].ship||(document.getElementById("board1-"+e+t).style.backgroundColor="gainsboro")}function y(e,t){let n=!0;if(t+4<11){for(let o=0;o<4;o++)x.myBoard.squares[e][t+o].ship&&(n=!1);if(n){x.myBoard.placeShip(((e,t)=>{let n=0,o=[],r=!1;for(let e=0;e<4;e++)o[e]={hit:!1,boardR:null,boardC:null,pos:e};return{title:"boat1-1",length:4,hit:function(e){o[e].hit=!0,n++},hits:n,position:o,isSunk:function(){for(let e=0;e<4;e++)if(0==o[e].hit)return!1;return r=!0,!0},sunk:r}})(),e,t,!0);for(let n=0;n<4;n++)document.getElementById("board1-"+e+(t+n)).style.backgroundColor="blue"}}}function C(e,t){F(B?x:k,e,t)}let B=!0,I=g("board1",10),E=g("board2",10),x=m("Me",I,E,!0),k=m("cpu",E,I,!1),w=!1;function F(e,t,n){if(e.opponentBoard.squares[t][n].hit||1!=w||("Hit"===e.opponentBoard.receiveAttack(t,n)?(console.log(t,n,"hit"),function(e,t){let n;n=B?document.getElementById("board2-"+e+t):document.getElementById("board1-"+e+t),n.textContent="x"}(t,n),e.opponentBoard.squares[t][n].ship.isSunk()&&(e.opponentBoard.squares[t][n].ship.sunk=!0,function(e){for(let t=0;t<e.length;t++){let n,o=e.position[t].boardR,r=e.position[t].boardC;n=B?document.getElementById("board2-"+o+r):document.getElementById("board1-"+o+r),n.style.backgroundColor="red"}}(e.opponentBoard.squares[t][n].ship),e.opponentBoard.allShipsSunk()&&(w=!1,document.querySelector("#display").textContent=B?"Player 1 has won!":"Player 2 has won!"))):(console.log(t,n,"miss"),function(e,t){let n;n=B?document.getElementById("board2-"+e+t):document.getElementById("board1-"+e+t),n.textContent="o"}(t,n),B=!B)),!B){let e;e=k.cpuInfo.shipFound?k.cpuFoundAttack():k.cpuRandomAttack(),e||(e=k.cpuRandomAttack()),setTimeout((()=>{F(k,e.r,e.c)}),800)}}!function(){const e=document.createElement("div");e.id="header-div",e.textContent="Battleship",A.appendChild(e)}(),function(){const e=document.createElement("div");e.id="setup-area",A.appendChild(e)}(),function(){const e=document.createElement("div");e.id="content",A.appendChild(e);const t=document.createElement("div");t.id="display",A.appendChild(t),function(){const e=document.querySelector("#content");for(;e.firstChild;)e.removeChild(e.firstChild);const t=document.createElement("div");t.id="board1",e.appendChild(t);for(let e=0;e<10;e++){let n=document.createElement("div");n.setAttribute("class","rows");for(let t=0;t<10;t++){let o=document.createElement("div");o.setAttribute("class","squares"),o.id="board1-"+e+t,o.addEventListener("mouseenter",(()=>{w||v(e,t)})),o.addEventListener("mouseleave",(()=>{w||b(e,t)})),o.addEventListener("click",(n=>{console.log(n),!B&&w&&C(e,t),w||y(e,t)})),n.appendChild(o)}t.appendChild(n)}const n=document.createElement("div");t.id="board2",e.appendChild(n);for(let e=0;e<10;e++){let t=document.createElement("div");t.setAttribute("class","rows");for(let n=0;n<10;n++){let o=document.createElement("div");o.setAttribute("class","squares"),o.id="board2-"+e+n,o.addEventListener("click",(()=>{B&&w&&C(e,n)})),t.appendChild(o)}n.appendChild(t)}}()}(),function(){const e=document.getElementById("setup-area"),t=document.createElement("div");t.textContent="start game",t.addEventListener("click",(()=>{w=!0,console.log(w)})),e.appendChild(t);const n=document.createElement("div");n.id="ship-div",e.appendChild(n)}(),document.getElementById("ship-div").textContent="Place ship of length 4."})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,